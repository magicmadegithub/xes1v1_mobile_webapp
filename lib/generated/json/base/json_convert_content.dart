// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:xes1v1mobileweb/net/models/honor_list_entity.dart';
import 'package:xes1v1mobileweb/generated/json/honor_list_entity_helper.dart';
import 'package:xes1v1mobileweb/net/models/frame_entity.dart';
import 'package:xes1v1mobileweb/generated/json/frame_entity_helper.dart';
import 'package:xes1v1mobileweb/net/models/article_list_entity.dart';
import 'package:xes1v1mobileweb/generated/json/article_list_entity_helper.dart';
import 'package:xes1v1mobileweb/net/models/frame_list_entity.dart';
import 'package:xes1v1mobileweb/generated/json/frame_list_entity_helper.dart';
import 'package:xes1v1mobileweb/net/models/article_entity.dart';
import 'package:xes1v1mobileweb/generated/json/article_entity_helper.dart';
import 'package:xes1v1mobileweb/net/models/course_list_entity.dart';
import 'package:xes1v1mobileweb/generated/json/course_list_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {			case HonorListEntity:
			return honorListEntityFromJson(data as HonorListEntity, json) as T;			case HonorListData:
			return honorListDataFromJson(data as HonorListData, json) as T;			case FrameEntity:
			return frameEntityFromJson(data as FrameEntity, json) as T;			case FrameData:
			return frameDataFromJson(data as FrameData, json) as T;			case ArticleListEntity:
			return articleListEntityFromJson(data as ArticleListEntity, json) as T;			case ArticleListData:
			return articleListDataFromJson(data as ArticleListData, json) as T;			case FrameListEntity:
			return frameListEntityFromJson(data as FrameListEntity, json) as T;			case FrameListData:
			return frameListDataFromJson(data as FrameListData, json) as T;			case ArticleEntity:
			return articleEntityFromJson(data as ArticleEntity, json) as T;			case ArticleData:
			return articleDataFromJson(data as ArticleData, json) as T;			case CourseListEntity:
			return courseListEntityFromJson(data as CourseListEntity, json) as T;			case CourseListData:
			return courseListDataFromJson(data as CourseListData, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {			case HonorListEntity:
			return honorListEntityToJson(data as HonorListEntity);			case HonorListData:
			return honorListDataToJson(data as HonorListData);			case FrameEntity:
			return frameEntityToJson(data as FrameEntity);			case FrameData:
			return frameDataToJson(data as FrameData);			case ArticleListEntity:
			return articleListEntityToJson(data as ArticleListEntity);			case ArticleListData:
			return articleListDataToJson(data as ArticleListData);			case FrameListEntity:
			return frameListEntityToJson(data as FrameListEntity);			case FrameListData:
			return frameListDataToJson(data as FrameListData);			case ArticleEntity:
			return articleEntityToJson(data as ArticleEntity);			case ArticleData:
			return articleDataToJson(data as ArticleData);			case CourseListEntity:
			return courseListEntityToJson(data as CourseListEntity);			case CourseListData:
			return courseListDataToJson(data as CourseListData);    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {			case 'HonorListEntity':
			return HonorListEntity().fromJson(json);			case 'HonorListData':
			return HonorListData().fromJson(json);			case 'FrameEntity':
			return FrameEntity().fromJson(json);			case 'FrameData':
			return FrameData().fromJson(json);			case 'ArticleListEntity':
			return ArticleListEntity().fromJson(json);			case 'ArticleListData':
			return ArticleListData().fromJson(json);			case 'FrameListEntity':
			return FrameListEntity().fromJson(json);			case 'FrameListData':
			return FrameListData().fromJson(json);			case 'ArticleEntity':
			return ArticleEntity().fromJson(json);			case 'ArticleData':
			return ArticleData().fromJson(json);			case 'CourseListEntity':
			return CourseListEntity().fromJson(json);			case 'CourseListData':
			return CourseListData().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'HonorListEntity':
			return List<HonorListEntity>();			case 'HonorListData':
			return List<HonorListData>();			case 'FrameEntity':
			return List<FrameEntity>();			case 'FrameData':
			return List<FrameData>();			case 'ArticleListEntity':
			return List<ArticleListEntity>();			case 'ArticleListData':
			return List<ArticleListData>();			case 'FrameListEntity':
			return List<FrameListEntity>();			case 'FrameListData':
			return List<FrameListData>();			case 'ArticleEntity':
			return List<ArticleEntity>();			case 'ArticleData':
			return List<ArticleData>();			case 'CourseListEntity':
			return List<CourseListEntity>();			case 'CourseListData':
			return List<CourseListData>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}